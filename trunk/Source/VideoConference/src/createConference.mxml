<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   width="1200" height="620" backgroundAlpha="0"
			   chromeColor="#FFFFFF" pageTitle="DMC Flex Conference" initialize="initApp()" applicationComplete="application1_applicationCompleteHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import component.Message;
			
			import model.AppModel;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import object.Conference;
			import object.Participant;
			import object.User;
			
			import spark.components.CheckBox;
			public var mySO:SharedObject;
			public var user:User;
			private var conference:Conference = new Conference();
			public var conference_id:int;
			public var ListParticipant:ArrayCollection = new ArrayCollection;
			
			protected function initApp():void
			{
				mySO = SharedObject.getLocal("info","/");
				if(mySO.data.user == null)
					AppModel.getInstance().navigate("home.html");
				if(mySO.data.conf==null)
					this.currentState = "create";
				else
				{
					this.currentState = "edit";
					conference_id = mySO.data.conf;
				}
			}
		
			protected function checkValid():Boolean
			{
				var time_start:Date = new Date();
				var time_end:Date = new Date();
				time_start.hours= hours_start.value;
				time_start.minutes= minutes_start.value;
				time_end.hours= hours_end.value;
				time_end.minutes= minutes_end.value;
				
				var today:Date = new Date();
				if(dtf_date.selectedDate < today)
				{
					Message.show("Please choose a day after today",Message.Error,this,true);
					dtf_date.setFocus();
					return false;
				}
				
				if(title.text==null || title.text == '')
				{
					Message.show("Please input title",Message.Error,this,true);
					title.setFocus();
					return false;
				}
				if(description.text == null || description.text == '')
				{
					Message.show("Please input Description",Message.Error,this,true);
					description.setFocus();
					return false;
				}
				if(dtf_date.selectedDate == null)
				{
					Message.show("Please input Date",Message.Error,this,true);
					return false;
				}
				if(time_start.time <= time_end.time)
				{
					Message.show("Time incorrect",Message.Error,this,true);
					return false;
				}
				return true;
			}
			
			protected function Create(event:MouseEvent):void
			{
				if(checkValid())
					if(createConf())
						ro_conference.createConference(conference);
			}
			
			protected function Update(event:MouseEvent):void
			{
				if(checkValid())
					if(createConf())
					{
						conference.conference_id = conference_id;
						ro_conference.updateInfo(conference);
					}
			}
			
			private function createConf():Boolean
			{
				var time_start:Date = new Date();
				var time_end:Date = new Date();
				time_start.hours= hours_start.value;
				time_start.minutes= minutes_start.value;
				time_end.hours= hours_end.value;
				time_end.minutes= minutes_end.value;
				
				
				var sub:String =user.subcriptions==1?"free":user.subcriptions==2?"basic":"gold";
				var count:String = user.subcriptions==1?"4":user.subcriptions==2?"10":"20";
				if(checkSubcriptions())
				{
					//var conference:Conference = new Conference();
					conference.conference_name = title.text;
					conference.description = description.text;
					conference.date = dtf_date.selectedDate;
					conference.time_start = time_start;
					conference.time_end = time_end;
					conference.host_id = mySO.data.user;
					conference.participant = CountParticipant();
					//ro_conference.createConference(conference);
					return true;
				}
					
				else
				{
					Message.show("Your subcriptions is " + sub + ". Max Participant:" + count,Message.Error,this);
					return false;
				}
					
			}
			
			protected function CountParticipant():int
			{
				var count:int = 0;
				for(var i:int=0;i<participants.dataGroup.numElements;i++)
				{
					var obj:Object = participants.dataGroup.getElementAt(i);
					if(obj.cb.selected)
						count++;
				}
				return count;
			}
			
			protected function Cancel(event:MouseEvent):void
			{
				
				PopUpManager.removePopUp(this);
			}
			
			protected function application1_applicationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				ro_user.getUser();
				ro_user.getUserById(mySO.data.user);
				if(this.currentState== "edit")
					ro_conference.getConferencesById(conference_id);
			}
			protected function getUser_result(event:ResultEvent):void
			{
				var arr:ArrayCollection= event.result as ArrayCollection;
				for(var i:int;i<arr.length;i++)
				{
					if(arr.getItemAt(i).user_id==mySO.data.user)
						arr.removeItemAt(i);
				}
				participants.dataProvider = arr;
			}
			
			protected function getUserById_result(event:ResultEvent):void
			{
				user= event.result as User;
			}
			
			protected function Update_result(event:ResultEvent):void
			{
				getParticipants();
				for each(var Part:Participant in ListParticipant)
				{
					Part.conference_id = conference_id;
				}
				ro_participant.updateParticipants(ListParticipant);
			}
			
			protected function CreateConference_result(event:ResultEvent):void
			{
				getParticipants();
				ro_participant.createParticipant(ListParticipant);
			}
			
			protected function getParticipants():void
			{
				ListParticipant = new ArrayCollection;
				if (participants.dataGroup.numElements > 0)
				{
					for (var i:int = 0; i < participants.dataGroup.numElements; i++)
					{
						var obj:Object = participants.dataGroup.getElementAt(i) as Object;
						if(obj.cb.selected && obj.data.user_id != mySO.data.user)
						{
							var participant:Participant = new Participant();
							participant.host_id = mySO.data.user;
							participant.user_id = obj.data.user_id;
							ListParticipant.addItem(participant);
						}
					}
				}
			}
			
			protected function CreateParticipant_result(event:ResultEvent):void
			{
				Message.show("Your conference was created",Message.Information,this);		
			}
			
			
			protected function checkSubcriptions():Boolean
			{
				if(participants.dataGroup.numElements>0)
				{
					var count:int = 0;
					var obj:Object;
					for(var i:int=0;i<participants.dataGroup.numElements;i++)
					{
						obj=participants.dataGroup.getElementAt(i) as Object;
						if(obj.cb.selected)
							count++;
					}
				}
				switch(user.subcriptions)
				{
					case 1:
						return count<=4?true:false;
					case 2:
						return count<=10?true:false;
					case 3:
						return count<=20?true:false;
					default:
						return null;
				}
			}
			protected function error(event:FaultEvent):void
			{
				Message.show(event.fault.faultString,Message.Error,this);
				Alert.show(event.fault.faultString);
			}
			
			protected function getConferenceById_result(event:ResultEvent):void
			{
				conference = event.result as Conference;
				title.text = conference.conference_name;
				description.text = conference.description;
				dtf_date.selectedDate = conference.date;
				hours_start.value = conference.time_start.hours;
				minutes_start.value = conference.time_start.minutes;
				hours_end.value = conference.time_end.hours;
				minutes_end.value = conference.time_end.minutes;
				ro_participant.getParticipantByConferenceId(conference_id);
			}
			
			protected function getParticipantByConferenceId_result(event:ResultEvent):void
			{
				var ListParticipant:ArrayCollection = event.result as ArrayCollection;
				for(var i:int=0;i<participants.dataGroup.numElements;i++)
				{
					var obj:Object = participants.dataGroup.getElementAt(i);
					for each(var participant:Participant in ListParticipant)
					{
						if(obj.data.user_id == participant.user_id)
							obj.cb.selected = true;
					}
				}
			}
			
			protected function UpdateParticipants_result(event:ResultEvent):void
			{
				Message.show("Your conference was updated",Message.Information,this);
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
<!--		<s:RadioButtonGroup id="rdg_start"/>
		<s:RadioButtonGroup id="rdg_end"/> -->
		<s:RemoteObject id="ro_user" destination="UserService" showBusyCursor="true">
			<s:method name="getUser" result="getUser_result(event)" fault="error(event)"/>
			<s:method name="getUserById" result="getUserById_result(event)"  fault="error(event) "/>
		</s:RemoteObject>
		<s:RemoteObject id="ro_conference" destination="ConferenceService" showBusyCursor="true">
			<s:method name = "createConference" result="CreateConference_result(event)" fault="error(event)"/>
			<s:method name="getConferencesById" result="getConferenceById_result(event)" fault="error(event)"/>
			<s:method name="updateInfo" result="Update_result(event)" fault="error(event)"/>
		</s:RemoteObject>
		<s:RemoteObject id="ro_participant" destination="ParticipantService" showBusyCursor="true">
			<s:method name="createParticipant" result="CreateParticipant_result(event)" fault="error(event)"/>
			<s:method name="getParticipantByConferenceId" result="getParticipantByConferenceId_result(event)" fault="error(event)"/>
			<s:method name="updateParticipants" result="UpdateParticipants_result(event)" fault="error(event)"/>
		</s:RemoteObject>
	</fx:Declarations>
	<s:states>
		<s:State name="create"/>
		<s:State name="edit"/>
		<s:State name="view"/>
	</s:states>
	<fx:Style source="conferenceSkin.css"/>
	<s:BorderContainer horizontalCenter="1" verticalCenter="1" >
		<s:borderStroke> 
			<mx:SolidColorStroke 
				color="black" 
				weight="3"/> 
		</s:borderStroke> 
		<s:VGroup paddingTop="15" paddingBottom="15" paddingLeft="15" paddingRight="15">
			<s:HGroup verticalAlign="middle">
				<s:Label text="Title: " fontWeight="bold" width="100"/>	
				<s:TextInput id="title" width="239"/>
			</s:HGroup>
			<s:HGroup verticalAlign="middle">
				<s:Label text="Description: " fontWeight="bold" width="100"/>
				<s:TextArea id="description"  width="239" height="77" />	
			</s:HGroup>
			<s:HGroup verticalAlign="middle">
				<s:Label  text="Date: " fontWeight="bold" width="100"/>
				<mx:DateField id="dtf_date"  width="116" showToday="true" />
			</s:HGroup>
			<s:HGroup verticalAlign="middle">
				<s:Label  text="Time Start: " fontWeight="bold" width="100"/>
				 
				<s:NumericStepper id="hours_start"  width="40" maximum="23" allowValueWrap="true"/>
				<s:NumericStepper id="minutes_start" width="40" maximum="60" allowValueWrap="true"/>
				
<!--				<s:RadioButton id="am_start"  group="{rdg_start}" label="AM" fontWeight="bold" selected="true"/>
				<s:RadioButton id="pm_start" group="{rdg_start}" label="PM" fontWeight="bold"/>
-->
			</s:HGroup>
			<s:HGroup verticalAlign="middle">
				<s:Label  text="Time End: " fontWeight="bold" width="100"/>
				
				<s:NumericStepper id="hours_end"  width="40" maximum="23" allowValueWrap="true"/>
				<s:NumericStepper id="minutes_end" width="40" maximum="60" allowValueWrap="true"/>
<!--					<s:RadioButton id="am_end" group="{rdg_end}" label="AM" fontWeight="bold" selected="true"/>
					<s:RadioButton id="pm_end" group="{rdg_end}" label="PM" fontWeight="bold"/>	
-->				
			</s:HGroup>
			<s:HGroup verticalAlign="middle">
				<s:Label  text="Participants: " fontWeight="bold" width="100"/>
				<s:List id="participants" width="239" height="210" itemRenderer="listParticipant"/>	
			</s:HGroup>
			<s:HGroup horizontalAlign="center" width="100%" verticalAlign="middle">
				<s:Label id="create" text="Create" width="60" height="30" fontWeight="bold" color="#ffffff" backgroundColor="#000000" textAlign="center" verticalAlign="middle" click.create="Create(event)" includeIn="create"/>
				<s:Label id="save"  text="Save Changes" width="100" height="30" fontWeight="bold" color="#ffffff" backgroundColor="#000000" textAlign="center" verticalAlign="middle" includeIn="edit" click.edit="Update(event)"/>
				<s:Label id="cancel"  text="Cancel" width="60" height="30" fontWeight="bold" color="#ffffff" backgroundColor="#000000" textAlign="center" verticalAlign="middle" click="Cancel(event)"/>
			</s:HGroup>
			
		</s:VGroup>
	</s:BorderContainer>
<!--	<s:Image x="406" y="62" width="380" height="500" source="@Embed(source='images/boder10.png')"/>
	<s:Label x="482" y="97" text="Title: " fontWeight="bold"/>	
	<s:TextInput id="title" x="522" y="91" width="239"/>
	<s:Label x="440" y="126" text="Description: " fontWeight="bold"/>
	<s:TextInput id="description" x="522" y="121" width="239" height="77"/>
	<s:Label x="479" y="213" text="Date: " fontWeight="bold"/>
	<s:Label x="478" y="243" text="Time: " fontWeight="bold"/>
	
	<s:NumericStepper id="day" x="522" y="206" width="40" value="1"/>
	<s:NumericStepper id="month" x="570" y="206" width="40" value="1"/>
	<s:NumericStepper id="year" x="618" y="206" width="60"/>

	<mx:DateField id="dtf_date" x="522" y="208" width="116"/>
	<s:NumericStepper id="hours" x="522" y="237" width="40" maximum="23"/>
	<s:NumericStepper id="minutes" x="570" y="237" width="40" maximum="60"/>
	<s:RadioButton id="am" x="618" y="242" label="AM" fontWeight="bold" selected="true" value="1"/>
	<s:RadioButton id="pm" x="662" y="242" label="PM" fontWeight="bold"/>
	<s:Label x="440" y="298" text="Participants: " fontWeight="bold"/>
	<s:List id="participants" x="522" y="298" width="239" height="210"/>
		<s:CheckBox x="531" y="308" label="bap_rang_bo"/>
		<s:CheckBox x="531" y="334" label="duka_tran"/>
		<s:CheckBox x="531" y="360" label="hoang_dung"/>	
	<s:Label id="create" x="534" y="537" text="Create" width="60" height="30" fontWeight="bold" color="#ffffff" backgroundColor="#000000" textAlign="center" verticalAlign="middle"/>
	<s:Label id="cancel" x="607" y="537" text="Cancel" width="60" height="30" fontWeight="bold" color="#ffffff" backgroundColor="#000000" textAlign="center" verticalAlign="middle"/>
	
	-->	
</s:Application>
